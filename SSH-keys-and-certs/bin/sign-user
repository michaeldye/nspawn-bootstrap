#!/bin/bash -e

BASEDIR="$(dirname $0)"
GENDIR="$(realpath $BASEDIR/../generated)"

TEMP=$(mktemp -d)

trap "rm -Rf $TEMP" SIGINT EXIT

function out() {
  tag=$1; shift
  msg=$1; shift

  (echo "$tag $msg" >&2)
}

E="[ERROR]"
I="[INFO]"
W="[WARNING]"

usage_str="usage: $0 domain_name username (--new|key_file_basename)"

# TODO: redo this arg parsing

(( "$#" < 3 )) && {
  out $E "$usage_str" && exit 1
} || {
  # supports '--help', '-h', '-?', '--?'
  [[ "$1" =~ ^-{1,2}(h(elp)?|\\?) ]] && out $I $usage_str && exit 0
}


key_valid_weeks=208

CA_DOMAIN=$1; shift
USER=$1; shift

opt="$1"; shift
[[ "$opt" == "--new" ]] && {
  NEW="true"

  # set to a default location
  FILE="${GENDIR}/${CA_DOMAIN}-${USER}-key"
} || {
  NEW="false"
  FILE="$opt"
}

[[ ! -d "$GENDIR" ]] && {
  out $E "Expected output directory for generated keys and certs does not exist, $GENDIR"
  exit 1
} || {
  out $I "Using $GENDIR as output directory"
}

cert=$(basename "$FILE" ".pub")"-cert.pub"

[[ -f "$GENDIR/$cert" ]] && {
  out $E "Cert already exists for $FILE, please delete it before continuing"
  exit 1
}

[[ -x "$GENDIR/askpass" ]] && {
  ap="-P \"$($GENDIR/askpass)\""
} || {
  ap=""
}

[[ "$NEW" == "true" ]] && {
  ssh-keygen -t rsa -b 4096 -f $FILE -C "key for $USER accessing $CA_DOMAIN generated by sign-user script" -N "" || ( out $E "Error creating new key at $FILE" && exit 1 )
} || {
  [[ ! -f "$FILE" ]] && (out $E "Expected key at $FILE but one was not found" && exit 1)
}

env -i bash -xc "ssh-keygen -s $GENDIR/${CA_DOMAIN}-ca -n \"$USER\" -V -60m:+${key_valid_weeks}w $ap -I \"$USER user key\" \"$FILE\""

[[ "$NEW" == "true" ]] && {
  gen_ssh_config=$GENDIR/ssh-config-$CA_DOMAIN
  [[ ! -f "$gen_ssh_config" ]] && out $E "Unable to find $gen_ssh_config" && exit 1

  # TODO: consider making this optional
  sed -i "s,#CertificateFile,CertificateFile ${FILE}-cert.pub," $gen_ssh_config || (out $E "Unable to edit $gen_ssh_config" && exit 1)
  sed -i "s,#IdentityFile,IdentityFile ${FILE}," $gen_ssh_config || (out $E "Unable to edit $gen_ssh_config" && exit 1)
  sed -i "s,#User,User $USER," $gen_ssh_config || (out $E "Unable to edit $gen_ssh_config" && exit 1)

  out $I "Edited $gen_ssh_config to use newly-signed user cert"
}

# print new content to stdout
find $GENDIR -wholename "$FILE*" | xargs

out $I "Finished."

exit 0
